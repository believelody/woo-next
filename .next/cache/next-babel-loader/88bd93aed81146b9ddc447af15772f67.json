{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nexport var createCart = function createCart(product, quantity, variationValue) {\n  var rawPrice = parseFloat(product.price.replace(\",\", \".\").substring(1));\n  var indexVariation = product.variations.nodes.findIndex(function (variation) {\n    return variation.attributes.nodes[0].value === variationValue;\n  });\n\n  if (indexVariation > -1) {\n    return [{\n      quantity: quantity,\n      totalPrice: (quantity * rawPrice).toFixed(2),\n      variation: variationValue,\n      productVariation: product\n    }];\n  }\n\n  return null;\n};\nexport var updateCart = function updateCart(cart, product, quantity, variationValue) {\n  var isProductMatchIndex = cart.findIndex(function (item) {\n    return item.variation === variationValue;\n  });\n  var rawPrice = parseFloat(product.price.replace(\",\", \".\").substring(1));\n\n  if (isProductMatchIndex > -1) {\n    cart[isProductMatchIndex].quantity += quantity;\n    cart[isProductMatchIndex].totalPrice = (rawPrice * cart[isProductMatchIndex].quantity).toFixed(2);\n    return cart;\n  } else {\n    return [].concat(_toConsumableArray(cart), [{\n      quantity: quantity,\n      totalPrice: (quantity * rawPrice).toFixed(2),\n      productVariation: product,\n      variation: variationValue\n    }]);\n  }\n};","map":{"version":3,"sources":["/home/yamakasi/nextjs/woo-next/utils/cart.util.js"],"names":["createCart","product","quantity","variationValue","rawPrice","parseFloat","price","replace","substring","indexVariation","variations","nodes","findIndex","variation","attributes","value","totalPrice","toFixed","productVariation","updateCart","cart","isProductMatchIndex","item"],"mappings":";AAAA,OAAO,IAAMA,UAAU,GAAG,SAAbA,UAAa,CAACC,OAAD,EAAUC,QAAV,EAAoBC,cAApB,EAAuC;AAC7D,MAAIC,QAAQ,GAAGC,UAAU,CAACJ,OAAO,CAACK,KAAR,CAAcC,OAAd,CAAsB,GAAtB,EAA2B,GAA3B,EAAgCC,SAAhC,CAA0C,CAA1C,CAAD,CAAzB;AACA,MAAIC,cAAc,GAAGR,OAAO,CAACS,UAAR,CAAmBC,KAAnB,CAAyBC,SAAzB,CAAmC,UAAAC,SAAS;AAAA,WAAIA,SAAS,CAACC,UAAV,CAAqBH,KAArB,CAA2B,CAA3B,EAA8BI,KAA9B,KAAwCZ,cAA5C;AAAA,GAA5C,CAArB;;AACA,MAAIM,cAAc,GAAG,CAAC,CAAtB,EAAyB;AACrB,WAAO,CACH;AACIP,MAAAA,QAAQ,EAARA,QADJ;AAEIc,MAAAA,UAAU,EAAE,CAACd,QAAQ,GAAGE,QAAZ,EAAsBa,OAAtB,CAA8B,CAA9B,CAFhB;AAGIJ,MAAAA,SAAS,EAAEV,cAHf;AAIIe,MAAAA,gBAAgB,EAAEjB;AAJtB,KADG,CAAP;AAQH;;AACD,SAAO,IAAP;AACH,CAdM;AAgBP,OAAO,IAAMkB,UAAU,GAAG,SAAbA,UAAa,CAACC,IAAD,EAAOnB,OAAP,EAAgBC,QAAhB,EAA0BC,cAA1B,EAA6C;AACnE,MAAMkB,mBAAmB,GAAGD,IAAI,CAACR,SAAL,CAAe,UAAAU,IAAI;AAAA,WAAIA,IAAI,CAACT,SAAL,KAAmBV,cAAvB;AAAA,GAAnB,CAA5B;AACA,MAAIC,QAAQ,GAAGC,UAAU,CAACJ,OAAO,CAACK,KAAR,CAAcC,OAAd,CAAsB,GAAtB,EAA2B,GAA3B,EAAgCC,SAAhC,CAA0C,CAA1C,CAAD,CAAzB;;AACA,MAAIa,mBAAmB,GAAG,CAAC,CAA3B,EAA8B;AAC1BD,IAAAA,IAAI,CAACC,mBAAD,CAAJ,CAA0BnB,QAA1B,IAAsCA,QAAtC;AACAkB,IAAAA,IAAI,CAACC,mBAAD,CAAJ,CAA0BL,UAA1B,GAAuC,CAACZ,QAAQ,GAAGgB,IAAI,CAACC,mBAAD,CAAJ,CAA0BnB,QAAtC,EAAgDe,OAAhD,CAAwD,CAAxD,CAAvC;AACA,WAAOG,IAAP;AACH,GAJD,MAKK;AACD,wCACOA,IADP,IAEI;AACIlB,MAAAA,QAAQ,EAARA,QADJ;AAEIc,MAAAA,UAAU,EAAE,CAACd,QAAQ,GAAGE,QAAZ,EAAsBa,OAAtB,CAA8B,CAA9B,CAFhB;AAGIC,MAAAA,gBAAgB,EAAEjB,OAHtB;AAIIY,MAAAA,SAAS,EAAEV;AAJf,KAFJ;AASH;AACJ,CAnBM","sourcesContent":["export const createCart = (product, quantity, variationValue) => {\n    let rawPrice = parseFloat(product.price.replace(\",\", \".\").substring(1))\n    let indexVariation = product.variations.nodes.findIndex(variation => variation.attributes.nodes[0].value === variationValue)\n    if (indexVariation > -1) {\n        return [\n            {\n                quantity,\n                totalPrice: (quantity * rawPrice).toFixed(2),\n                variation: variationValue,\n                productVariation: product\n            }\n        ]\n    }\n    return null\n}\n\nexport const updateCart = (cart, product, quantity, variationValue) => {\n    const isProductMatchIndex = cart.findIndex(item => item.variation === variationValue)\n    let rawPrice = parseFloat(product.price.replace(\",\", \".\").substring(1))\n    if (isProductMatchIndex > -1) {\n        cart[isProductMatchIndex].quantity += quantity\n        cart[isProductMatchIndex].totalPrice = (rawPrice * cart[isProductMatchIndex].quantity).toFixed(2)\n        return cart\n    }\n    else {\n        return [\n            ...cart,\n            {\n                quantity,\n                totalPrice: (quantity * rawPrice).toFixed(2),\n                productVariation: product,\n                variation: variationValue\n            }\n        ]\n    }\n}"]},"metadata":{},"sourceType":"module"}
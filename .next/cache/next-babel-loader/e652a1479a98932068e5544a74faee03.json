{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nexport const createCart = product => {\n  let rawPrice = parseFloat(product.price.replace(\",\", \".\").substring(1));\n  let indexVariation = product.variations.nodes.findIndex(variation => variation.attributes.nodes[0].value === variationValue);\n\n  if (indexVariation > -1) {\n    let newProduct = _objectSpread(_objectSpread({}, product), {}, {\n      variations: {\n        nodes: [product.variations.nodes[indexVariation]]\n      }\n    });\n\n    return [{\n      totalPrice: (quantity * rawPrice).toFixed(2),\n      quantity,\n      productVariation: newProduct\n    }];\n  }\n\n  return null;\n};","map":{"version":3,"sources":["/home/yamakasi/nextjs/woo-next/utils/cart.util.js"],"names":["createCart","product","rawPrice","parseFloat","price","replace","substring","indexVariation","variations","nodes","findIndex","variation","attributes","value","variationValue","newProduct","totalPrice","quantity","toFixed","productVariation"],"mappings":";;;;;;AAAA,OAAO,MAAMA,UAAU,GAAIC,OAAD,IAAa;AACnC,MAAIC,QAAQ,GAAGC,UAAU,CAACF,OAAO,CAACG,KAAR,CAAcC,OAAd,CAAsB,GAAtB,EAA2B,GAA3B,EAAgCC,SAAhC,CAA0C,CAA1C,CAAD,CAAzB;AACA,MAAIC,cAAc,GAAGN,OAAO,CAACO,UAAR,CAAmBC,KAAnB,CAAyBC,SAAzB,CAAmCC,SAAS,IAAIA,SAAS,CAACC,UAAV,CAAqBH,KAArB,CAA2B,CAA3B,EAA8BI,KAA9B,KAAwCC,cAAxF,CAArB;;AACA,MAAIP,cAAc,GAAG,CAAC,CAAtB,EAAyB;AACrB,QAAIQ,UAAU,mCACPd,OADO;AAEVO,MAAAA,UAAU,EAAE;AACRC,QAAAA,KAAK,EAAE,CAACR,OAAO,CAACO,UAAR,CAAmBC,KAAnB,CAAyBF,cAAzB,CAAD;AADC;AAFF,MAAd;;AAMA,WAAO,CACH;AACIS,MAAAA,UAAU,EAAE,CAACC,QAAQ,GAAGf,QAAZ,EAAsBgB,OAAtB,CAA8B,CAA9B,CADhB;AAEID,MAAAA,QAFJ;AAGIE,MAAAA,gBAAgB,EAAEJ;AAHtB,KADG,CAAP;AAOH;;AACD,SAAO,IAAP;AACH,CAnBM","sourcesContent":["export const createCart = (product) => {\n    let rawPrice = parseFloat(product.price.replace(\",\", \".\").substring(1))\n    let indexVariation = product.variations.nodes.findIndex(variation => variation.attributes.nodes[0].value === variationValue)\n    if (indexVariation > -1) {\n        let newProduct = {\n            ...product,\n            variations: {\n                nodes: [product.variations.nodes[indexVariation]]\n            }\n        }\n        return [\n            {\n                totalPrice: (quantity * rawPrice).toFixed(2),\n                quantity,\n                productVariation: newProduct\n            }\n        ]\n    }\n    return null\n}"]},"metadata":{},"sourceType":"module"}